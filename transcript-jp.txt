私は来てくれた皆様に感謝したい
Clojureがパンフレットにシンプルに書いたように、タイトルは話しています。
、それは近似ではなく、言い換えればチュートリアルエンクロージャまたは
Clojureの簡単な説明
Clojureの包括的な説明ではありません。
なぜあなたがしたいと思うかについての考え方について閉鎖している
それを使用して私はClojureを作った人です
私は現在、機能性のあるトピックのデータベースについて作業しています
データベース
それは正しいClojureはJVMアーキテクチャ上で動作します
私は、昼間の共同創設者であり、Tomic滞在と
Clojureの開発とスチュワードシップ、しかし私が作ろうとしている主なポイント
この聴衆に私自身は、この話では幾分か
仕事に疑念を抱いていて、プログラミングに4回も行ったのは、私が
その絶対トン
それは私が20年前にしたことです
プログラマー
私はこれ以上これをやりたくないので、アプリの作り方を正確に知っている
JavaとC C ++とC sharpを使用しています
私がそれらについて考えていることが正しいことを意味しますが、それは私の経験ですが、私は
あなたについて疑問に思う
あなたはどのようにあなたがどのように幸せであるか聞いて、どのように多くのPPLのプログラム
選択肢を探していることについて積極的に不幸
多くの人が聞いたことのない偉大な人々にClojureを試してみました
Clojureのあなたは間違った部屋にいる
OK
どのように人々がClojureを試して、それを職場で使用するようにしているか
しかし、まだいくつかの話ではないかもしれないが、この話は、
あなたがClojureを積極的に使う方法を助けることができるClojuresの価値命題
どういうわけか偶然に1つの仕事
他の人はブライアンに入ることができませんでした私は言及すべきではない株式を取得
ブライアンは私たちに今すぐ話をさせてくれるのです。
多分あなたはブライアンに飽きただけで、
あなたは間違いなくグループに入っていて、私はブライアンの良い友達と彼が好きだった
会談は素晴らしい
だから私はあなたが非常に少数の人がいる場合は、この1つを持っていただきありがとう
喜びを聞いたことがない
だから私は多くの時間を費やすつもりはありません。
何人の人が私の話をシンプルにしてくれているのを見てきました。
私は単純なClojureは
プログラミング言語はjvmとJavaScriptで動作し、
ClojureのサブセットがJavaScriptで動作する
そのプログラムは、元々はその両方を対象にすることができます
jb mとclrをターゲットにしていますが、そこにはまだclrへのポートがあります
しかし、2007年に最初にリリースされた広範な使用を見ていないようです
それは悲しいことですが、特に私の視点からは驚くべき養子縁組を知っています
それが機能的なリストであるため
データ指向で、それはそのようなものではないように見える多くのことがあります
成功するでしょう。この話は実際にはデータに関するものです
オリエンテーションのClojureので、多くの最高のパートナーと最も生産的な
私が知っているプログラムはすべてを空白で書いており、
ばかばかしく洗練されたものを非常に短い
時間とプログラマーの生産性が重要なので、エイドリアン
コッククロフトは建築家のネットフリックスだった今はより良い冒険です
あなたはどのようにJavaが空白になると思いますか
大丈夫です
この空白に適していないjavaについては何かがあります
多分それを離れて使用するつもりかもしれません
話はおそらく理由についてです
どのようにこれが真実であるかのように、Clojureとは異なる
おそらくそのブランクに適しています
私が話したい最初のことは、私たちがこの傾向を持っていると思うということです
自分自身について考えるためのプログラミングではちょうどトンを取ったし、私たちの言語は
道具や技術と私は私の私私は私たちが何をしているか私たちはトラックを失う
私たちは皆、自分自身のために、あるいは自分自身のために働いていますが、
ビジネスや組織にとっては、
そのソフトウェアはそのタスクの権利に完全に二次的です
費用便益比率の面で常に測定され、投資収益率
どのようにして迅速に商品を市場に出すことができ、私たちがやっていることです
私たちがそれをしていないならば、私たちは本当に良い参加者ではない
私たちのビジネスや組織にいる
ステークホルダーは、彼らが本当に望むものを何にしたいのですか？
何か良いと彼らはすぐにそれが欲しい
だから、あなたが知っていることは良いことだと思う
物事を良くする方法を知っていることを知っている。
もの
技術は彼らと一緒に成功したときに良いものです
私たちのテストパスでタイプチェック
私たちは何か良いことを持っていますが、もちろん私たちはすべて、私たちの最善の努力と
あなたが悪い行為だと言っているわけではありません。
私たちがそこで何をするか
私たちは私たちがプログラムを持っていることを知っている私たちが働いていないプログラムで終わる
チェックしてテストパスしても動作しません。
彼らはプログラムが何をしていない限り、ステークホルダーの視点
やらなければならないことは、間に伝達されたものだった
人や文書や文書ではない
彼らは操作上の要件を満たす必要があります。
フレキシブルにする
今すぐ、人々がすぐに何かをしたい時がある
彼らは実際にはより良い言語エンクロージャがある良いものを望んでいない
その権利のために私は絶対に確実に何か速く与えてください
捨てるつもりは、私を取ることはありませんが拡大されませんが育つことはありません
さらに
これらの最初の2つのことは、彼らが良いことを意味する権利ですが、彼らは良いことです
後者の3つのことを確実にするのに役立ちます。
もう一度やるべきだった
ステークホルダーがそれが何をしていると考えているかは、視点に立ったものです
やるべきこと
もちろん、彼らはソフトウェアに関する懸念を表明しているだろう
このボタンを押したときにこれを行う必要があります
それが安全でなければならないようなものを想定していない
それはあなたがそれがとても遅いためにコンピュータが発火する原因を知るべきではありません
3つの新しいデータセンターを必要とすべきではない
それは毎日1時間走り続けて止まらなくてはならない
それらは、何か良いものの無言の前提のようなものですが、
それはあなたが大規模な精巧なステートフルなプログラムを構築するならば終わります
彼らが何をやろうとしているかどうかを確認することは非常に困難です
彼らはそうすることになっています。もしあなたが
非常に大きなプログラムまたは非常に精巧なプログラムを作成するだけです
または非常にステートフルなプログラムであれば、それが
やりたいことはやらなければならない
Clojureが指向していることの1つは、理解しやすくすることです
あなたのプログラムがやろうとしているかどうかは、ほとんどそれを作ることで
実質的に小さくなり、また、
操作上の要件は、無言のボートロードのようなものです
ソフトウェア要件
あなたは知っている - あなたは通常の方法でそれを私のものすべてで
私のマシンや他のすべてを実行する方法を知っている人、それは1つです
Clojureの目標のClojureはそれが単なる瓶のホストされることを意図されていた
それは環境の中で実行され、右に忍び込むのは簡単です
もう1つの瓶にこれを加えて、それから私たちは走っていましたが、
共通のlispの言い回しを採用したいのであれば、それはちょっとしたことではありません
あなたのOSチームとデプロイメントチームに開始を尋ねるでしょう
彼らが持っていない性質を持つ完全に逸脱した何かを操作する
セキュリティの観点から理解する
Clojureによって利用可能な有価証券のjvmから入手可能なもの
それ以外の懸念事項は非常に重要なことです
今すぐブラウザにもアクセスできるので、どのくらいの人が書き込みをするかと思います
アプリケーションは、システム全体の一部がブラウザに触れていた
そう、今は2つの異なるものを使用しています
私はほとんど間違いなく2つの異なるものを使用して、私はそれが強さだと思う
両方の場所で同じ価値提案を提供していたClojure
サーバーとクライアントが別々の死者であっても
命題は彼のものよりもブラウザのほうが必要です
パフォーマンス面で最も複雑な場所
あなたは動的な言葉を見て、ああ、あなたが言うかもしれない多くの時間を知っている
どのようにそれが何でもできることを知っているが、あなたはそこに服を知っている
速い言語の
ベンチマークと試合であるベンチマーク試合は間違いありませんが、
私たちはJavaScriptを使ってそれに到達することができます
Clojureのスクリプトライブラリは、JavaScriptと自宅のスクリプトの公開を想定しています
実際にラップするライブラリです
これは新しい暑さで、ここでは自分のラップで本当に面白いものは何ですか？
反応して、それをパフォーマンスで叩く
永続的なデータ構造を常に使用することは可能でしょうか？
それについては1分後に話します
反応炉の大部分が変化を起こしているため、反応より速くなる
不変物の検出と変化の検出は同一性
比較
それは超高速で、実際に彼らは自分のすべてを保護するために使用しています
JavaScriptの永続的なデータ構造が反応するようになりました
私の手をチェックして奇妙な見た目で私のところに来た。
私たちはその戦略に切り替えているので、私たちにお金のトンを節約する
私が言った価値命題の他の部分は柔軟性がありました
あなたが知っている人は、ソフトウェアの利
システムは今すぐ明日ボタンを押す
ものは何かをするためにパンを変更することができる要件を変更するつもりです
異なる
変更は不可避ですので、プログラムを変更することができます
私たちはそれをもっと柔軟にすることができますか？
システムのサブコンポーネントをより柔軟にするための小さなシステム設計
そしてもちろんこれは古いですこれは最も古いものです
ゆるいカップリングだけど話して話して話し続けた
毎日のようにそれを通して
あなたはこれをより困難にする何かをする技法
何が簡単になるの？
私の話が終わったので、誰かがあなたに私がこの引用符を持っていることを知っていると言った
ウォルマートラボの男はあなたの話に入れたいと思うかもしれない。
彼が私の話を右に伝えているので、私たちが市場に近づくにつれて素晴らしい
より速く、より良い品質で我々は挿入意図しない中断やジョブを避ける
アプリは1つの領域でエンコードされ、
アプリケーション別のClojureはコードベースを約1/5に縮小します
サイズは、あなたが右に書かれているだろうJava
これらは私の話のポイントです。これは私がこれが欲しいものです。
ステークホルダーはこれがClojureをより速く選択することによってxを得ることであると言っています
製品の市場投入までの時間を短縮することができます。
私たちが変えるのは難しい
私たちはより小さなコードベースを持っていますので、どうやってこれを行うのですか
Clojureには多くの異なる特性がありますが、私は
今日2つの種類の話をしたいと思っています
Clojureを分けると思う
それはやや異なっています。
私はシンプルさと言っているので、他のものは単純です
私は複雑さの逆を意味します。私は容易さを意味するわけではありません。私はClojureが
簡単な言語
あなただけがあなたが入力し、すべてが魔法のように起こるか、ある種の
簡単なメトリック複雑なものは絡み合っていて、単純なものは絡み合っていません
彼らが多くを持っていても、より独立した独立した
起こっていること
このようなことは複雑で、
このようなものは簡単です
それは私が単純な解き放たないと言ったときの意味です
そのことは、これらすべての言語がすべてのことを正しく行うことができることを知っていることです
私たちは同じことをすることができ、人々はあなたが私ができることを知っている理由
JavaとScala、ClojureのCシャープと同じもの
誰でも汎用的な言葉であなたは同じことを達成することができます
その日の終わりには、言語をどのように区別するのか
実用的にして、彼らが慣れ親しんだものを何に集中させるか
私はそれが似ていないと思います
これは、あなたが知っているすべてのハイファルチンを摂取する前のことです。
プログラマやコンピュータ科学者としての自分の意見など
あなたが実際に何人の人々が何を処理するすべてのデータを話すプログラミング
彼らのプログラムのデータ処理はあなたの手を上げることができます
私たち全員がそうしています。これはほとんどのプログラムが何らかの情報を取っていることです
誰かが何かを入力してメッセージをお送りしました
後でそれを見つけようとどこかに置く
あなたはそれを他の人に送る画面上に置く
それはほとんどのプログラムがほとんどの場合行うことです
確かにプログラムの計算上の側面があります
これに問題がありますが、プログラムの処理データ
データは情報情報システムであり、これは
私たちが正しいことをしているのは、世界の情報と
情報はちょうどデータです
それは複雑なものではなく、精巧なものではありません
プログラマーが触れるまでは簡単なことです
私たちはデータ処理の処理をほとんどのプログラムはこれは非常に少ないですか
書き込みもデータもないプログラムは根本的に単純なものです
データは単なる生の不変情報
最初のポイントデータはデータ構造を作成すると不変です
あなたはそれをつぶすことができますが、実際のデータは不変です
もしあなたがそれを表現しているのであれば
その本質は、あなたがいろいろ試してみるよりも良いことです
彼らはタイプを追加するデータについて詳しく説明しています
データをアクティブにするメソッドを追加する。データを変更可能にする。データを移動可能にする。
彼らはあなたが代理人またはいくつかのアクティブなものを知っている
その時点で、彼らはそれを破壊している
それはそれが何であり、オブジェクト指向ではこれが横行していると思う
私たちの基本はオブジェクトを構築するので、
オブジェクトが正常であるプロセスについて2つの別々の方法で話す
恐ろしいひどい恐怖があるアプローチと情報
ローチは正しいですが、問題が発生するたびに私たちが作ったオブジェクトを引き出します
私たちは新しいクラスを作り、何かの同じ状況をやっています
そうすれば、私たちのプログラムは自分自身についてもう少し詳しく説明します
情報番組については、ますますコードの増加と減少
私はデータについて私は間違いだと思う
だからこそ、囲いの最も簡単なアイデアのようなデータを包み込んでください
これらの優れた特性を持つデータデータには何も問題はありません
実際にそれを使ってみましょう
顔のようなものだから近いそれを受け入れる
私が1分であなたに見せてくれる強力なデータリテラルを持っていることが最重要です
彼らの飛行機の右の平面は、平らなレベルを意味しています。
物とコードとこれは古いリストのものですエンクロージャーはデータとして表されます
これは、マクロと多くの
洗練されたプログラムの変換のものだけでなく、あなたがしないことを意味
違うものがある
関数のエンクロージャの大半はデータを取って、データは不変な
飾られていないものと同じものを返す
巨大なライブラリ機能は数百、数百、数百のデータ
すぐに使える操作機能
彼らはデータを返すので、データがあれば
その上にあるすべての機能を使用して、
あなたは一度学ぶこの巨大な図書館を持っているので、すべてのデータ
あなたが持っているすべての問題に適用することができます
特に我々が情報エンクロージャシステムに遭遇するたびに
システムのさまざまな部分がシステムの一部です
情報を操作することはあなたのシステムの一部です
またはあなたのようなあなたのプログラムの機械は、ソケットや通信
終点は機械のようなものです
それは情報のようなものなので、あなたのアクティブな部分があるでしょう
プログラムですが、いつでも
あなたは事実を表現するパートナープログラムを扱っています。
私たちは常にエンクロージャーでその情報を再生することを選択します
そこにはデータリテラルエンクロージャの小さなセットがあります
それらは比較的明らかです。通常の方法で整数を書くことができます。
最終的に2倍の通常の方法と大きなデシール
これらは正確な文字列を失わない適切な比率です。
引用符と文字列はjava.lang.stringです。
java.lang.stringなので、文字列リテラル4のリテラルです
データ構造を使用してプログラミングするため
我々が必要とする余分なもののカップルが、Javaコードを見ればすべてが書かれています
すべての単語の前後に引用符が付きます
いいえ仕事と成功するために文字列の他に何かを必要とする
プログラミング言語
それはシンボルを必要とし、識別子を必要とするので、適切に表現しようとするなら
あなたの子供はデータです
それらのものはファーストクラスのデータ構造または
文字列とは異なりますので、エンクロージャーの1つまたは2つのシンボルに2つあります。
他のキーワードと私はあなたに行くつもりはないそのエンクロージャー
記号が一般的に何かを参照するために使用されていることを知っている
else
そういう変数や物事のように、彼らは名前とキーワードの名前を付けました
彼らはあなたが望むかどうか知っているようなものです
それらはキーやマップとして非常に便利です
そのため、trueまたはfalseのブール値のリテラルが存在し、
仕事と同じものではないものはありません。
またはそこの仕事
javaブール値の文字やJava文字など、などもあります
リベラル44正規表現を使用して、データ構造に基本データ
構造体には、友だちの中に単独でリンクされたリストがあります
それらはすべて数字のリストをリストしています記号のリスト
記号といくつかの数字
それは大丈夫ですが異質であり、彼らは前に成長し、彼らは持っています
リンクされたリストの種類のパフォーマンス特性
正面に何かを置き、57,000ものを見つけるのが遅い
線形時間は中に物を見つけるために、そこにベクトルがある
括弧
もう一度彼らは異質であることができます。
シンボルを使っていますが、それらを混在させることができます。
しかし、彼らはまた、どこにいてもすぐにアクセスできるので、
リンクされたリストからそれらのキー値キー値のキー値
コメントはオプションです
キーはキーワードである必要はありませんので、最初のものは2つのキーワードマッピングを使用します
2番目の文字列は2つの文字列をマッピングする整数を使用しますが、
キーと値の両方で異質であり、次に、
ちょうどカーリーがハッシュを前につけて、あなたは再び異質なセックスをすることができます
何かとすべての巣の巣
これに関する重要なことの1つは、これらの地図が
非常に小さなものから非常に大きいものまで効率的です
小さなものの擬似オブジェクトの一種としてそれらをあなたは4つまたは5つを知っている
あなたや私たちのエントリー、またはあなたが持っている巨大な地図
何百万もの何百万ものものが同じことを知っている
データ構造は、その範囲のエンクロージャ全体で使用されます
私たちはこれら2つの用途を全く区別せず、すべてのデータ構造i
あなたが不変であることを示した
42を変更する方法がないように、変更する方法はありません。
ベクトルを変更する方法はありません。あなたができることは新しいベクトルを作ることです
あなたが始まったベクトルとは少し違って、両方の要因があります
永続的なデータ構造と呼ばれる手法があります。
2つのバージョンが効率的に新しい少し異なるバージョンを作る
フードの下ではかなりの量の構造的共有が行われている
それは構造を共有できる不変の権利であるため可能です
誰もそれらを変更することができず、それが実際にそれを使用する
小さなものからの範囲にわたって、不変のデータ構造
非常に大きなものを通して
それはあなたがまだ遵守しているこれらの新しい変更を書き込むにはコピーオンではありません
手元にあるデータ構造に対して大きな期待を持っています
これは実用的な関数型プログラミングの鍵です
Clojureの背後にあるアイデアやクロージャの背後にあるアイデアの1つは、この権利です
私はそんなにオブジェクト指向のプログラミングをして、それがとても忙しいのです
仕事とそれほど余分なものと私は最終的に私のキャリアの学習リストで後で
鋸の人々の建物で
はるかに単純なものの中で非常に面白いシステムと私はそれを試した
何を推測する
はるかに単純なものから全く同じシステムを構築することができ、私は
私はそれを繰り返すことはできませんが、私は基本的には非常に不幸でした
私がやっていることを自分のキャリアで浪費してきた
私は私のことを変えなければならない何かをする必要がある
あなたが同じようなプログラムを作ることができるので、私の人生をこのようにして浪費する時間
実質的に単純で同じことをするより良いプログラムをプログラムする
事実、私はあなたに示したデータ構造からそれらを構築することができます
それらのものを取ってそれらのものを最も多く返す純粋な関数
あなたのプログラムでは、あなたのプログラムのちょっとしたことをそのように構築することができます
あなたはコミュニケーションを持っている状態を持っている
あなたは私がランタイム多型エンクロージャーを好む他の側面を持っています
私はちょっと前に話しますが、あなたはこれからプログラムを構築することができます
あなたはそこから大規模なプログラムを構築することができますそれを右のデータベースを構築することができます
私はやっていると私はそれを使用してデータベースを構築したとき私はClojure私がターゲットしていた
JavaやC ++のサイドで構築したことをすべてやり遂げることができる
放送自動化システムスケジューリングシステムは管理システムを生産する
あなたがC ++を知っているにもかかわらず、選挙の投射システムと出口の投票システム
JavaとCシャープ
私はClojureを使って私が今までに何でも作ることができたとは思わなかった
小規模な場所に小さなレベルのコードを置いて
それは目標差し押さえです
私がやっていたことを置き換えたかった
よりシンプルに小さく、プロジェクトのオブジェクトプログラムははるかに堅牢です
指向プログラミング
私は同じ仕事を達成するためにやっていたので、Clojureの背後にある考え方は
それを劇的にしてみましょう
Clojureの構文は、あなたがそれを見ただけではありません。それはそれらのデータです
データ構造とその基本的なものの集合を構成する構造
拡張可能なデータ表記を表すEdenというフォーマットが、
リストコミュニティで使用されているs式の大人用バージョン
年
基本的には、データ構造からプログラムを構築します。
それは2番目に
したがって、データ構造は、構文が文字に基づいていないコードです
それは関数が何であるかの定義におけるデータ構造に基づいています。
あなたの頭があなたがいないというシンボルであるリスト
リストの次のものは、それ自体が引数のベクトルです
記号などであるが、構文はデータ構造の観点から記述される
それは構文がないのと同じではありませんが、それは解釈
起こり、通常のプログラミングでは特別なもの
言語宣言は構造体をコールします。
すべてがちょうど前の動詞のリストとして表されています
それはリストの方法でもあり、すべてが表現であり、それは
関数型プログラミング言語の典型
それは私がClojureの言葉について語るつもりだけど、私は
これらの側面の使用についてもう少し詳しく説明します
後で
エデンにはこのアクセス可能なデータ表記があります。
それを拡張してスペースと呼ばれる新しいタグを追加する方法もあります
既に知られているものに関して新しい何かを記述する
あなたは新しい部品や部品を作ると言うことができる任意のものを作ることができます
あなたは私に新しい解釈があると言うことができます
2つの数字のベクトルとそれをポイントなどと呼ぶつもりです
これらのエクステンションをカスケード接続して家具のものを作ることはできますが、
Edenについての重要なことは、データやコードのように便利であることです
以前のスライドで見たように、コメントは省略可能だと私は言った
それは間違っていると想像しています
あなたがJavaで言ったことのすべてに、兄がいて、それを望む人
それはあなたがそれのようなものを持つことができるように、ひどいでしょう
多くの人がプログラミングをエンコードしようとしたシステムを
JSONまたはXML
ええ、それはどれくらい楽しいですか？
ええ、これはAWSのようなものです。CloudFormationにはいくつかの機能があります
通常は宣言的な構文なので、これはネストされています
関数呼び出し
私たちはあなたがこのようにプログラムすることはできませんこの権利を行うことはできませんできません
データ構造を使ったプログラムがあるので、データが必要です
それに従う構造体フォーマット
私は本当にそれを読むために食べることができるように期待しているように
しかし私はちょうどそれがリストの権利の前にあなたに言った
カークあなたは車を知っている祈りと死を右にそれは機能を定義する
関数の名前はtextという引数をとります。
実装などなど、これはPeterのポートです
ノーフォークのPythonコード
それはPythonプログラムのように短く、コンテストのようなものではない
それは、それが問題です
あなたが読んでいるすべての言葉のように、それがすべて問題のすべてです
余分なものはない
静的な輸入品はありません
ええ、このタイプを入力してください
余分な制御のものそれはすべての問題について100％について
問題はそれがあなたが正しいことを望んでいるので、それは式典のない短いですが
最も重要なことは、問題についてです
今や後で、あなたが達成しようとしていることを何をしようとしているのかを見てください。
一度この形式をedenにしてコード用に使用すると、明らかに
それはあなたがそれをすべてのために使用するデータのために、あなたが
dslはHTMLを表すために、HTMLを知っているので
このXMLを生成して操作するのは相当なものだが、いくつかのランダム性
これはHTMLエンクロージャを表すための多くのDSLの1つですが、
このプログラムは同じ読者から作られたものと同じものです
使用可能なalucardエンクロージャを読み込む場合は、これを読み込みます
私は、キーワードを持つベクトルを取得し、そのベクトルはキーワードaを持ちます
私はあなたがデータ構造を取得したときに私が知っているデータを得る
特別なことをするつもりです私はあなたが知っていることを知っている
私がこれを読むと
それは素晴らしいことですが、これを処理するのは簡単です
これを生成するプログラムで、私は特別なことなしにHTMLを生成することができます
別のもの
もちろん、これを設定ファイルに使用します
なぜ私たちはそれを読むことができます私たちはそれを処理することができます私たちは操作することができます
それは私たちができることを知っている何百もの機能をすべて知っている
これを行うための使用は、あなたが持っていることをどのくらい持っている
使用する構文
私はJava Seaやそれから何かのものが正しいかどうかわからない。
何かを操作するための注釈があります
右のXML
たぶんあなた自身のDSLを書くことで、何かを盛り上げることができます。
あなたがAPIを使って物を読んだら、あなたは何を得るのですか？
この種のもののDomのいくつかのAPI作者のアイデア
あなたはXMLをよく読んだときに何を得るのですか？読む方法によって異なりますが、
これを得ることができる
あなたは彼らが新しい要素を得るたびにあなたを呼んだマシンの権利を知っています
ワオ
これは新しいプログラミングですnetflixは非常に有益にClojureを使用して
非常に簡潔にell es elは、それを見て、大きなデータ処理を行う
まさにClojureのように、それはエンベデッドエンクロージャの種類に近い
これをローカルで実行してからボタンを押すと、それが配布されます
あなたの頭の上でクラスタ化して実行してください
同じことをすることができますし、独自のClojure関数も実行することができます
それらと他のすべてを出荷するので、私たちはこれをやっています。
データを使用するClojureのタイプと勧誘システムが必要な場合
データを使用するスキーマ言語の差し押さえがあります。
ロジックdslのすべての表現としてのデータを使用し、これは可能です
あなたは非常に興味深い何かをすることです。
dslを書かれた人々がいて、より多くのプレッシャーを
それ
ツアーを完了し、あなたはdslで始まる一般目的を知っています
それは行為をしたのですが、なぜ、そして私が使うことができる人II
条件付きで1つ以上あることがわかっている場合があります。
もの
だからClojureのような言語でdslを実行することについてのクールなものの一つは、
あなたを並べ替えることができます
あなたのdslの中のClojureの全てのcoop coop
あなたがしなければならないことは、あなたが行っていることを明らかにすることです
Clojureを通ってあなたを閉鎖させて、それが非常に強力であるようにする
あなたはこれを続けて、あなたが
プログラムを生成するプログラムを記述し、それは小
機能エンクロージャとマクロと呼ばれる他のリストを知っているビジネス
どのようにしてあなたのパスからのマクロを見るかのようには何もありません
古いrまたはそれらのデータ構造の機能をデータ構造に
基本的にコンパイラの差し押さえはあなたが宣言すれば言う
私がプログラムでそれを見るとマクロとしての何か
私はあなたのコードを呼び出します私はあなたに遭遇したデータとしてフォームを提供し、
あなたは私にあなたが望むあらゆる変換を行うことができる別のフォームを返す
あなたが構築できる独自の構文を構築できます
言語を拡張することができますが、私たちが待つ必要はありません
私のために、または他の誰かのために、またはjava jsrについては、
私たちは未加工のデータ構造でこのすべてのことをやっています
オブジェクトとの対比
これは話のランチ部分はあまりにも事前に警告されたので、オブジェクトが好きです
マリオネットはブリトーのアナロジーを持っていますが、私はカンファレンスが好きではありませんでした。
ブリトスの物はまさにマリオンのようなものです
彼らはこれらすべての方法を正しいものにしています。
オブジェクト
それは彼らがコントロールスティック事を持っているようなものです
ウィキペディアは、それを持っている人は主義者と呼ばれる
彼らに同意する他の誰かを見つけることができませんでしたが、それはのようなクールな名前です
への参照があれば、あなたは書くことができる相手を遠隔制御することができます
あなたがその型を知っているオブジェクトであれば、いつでもそれらのメソッドのどれかを呼び出すことができます
それのように感じる
そしてあなたが望むスレッドがあれば、あなたが望むことを何でもすることができます
あなたはそれらのものを呼び出すことができるので
だから、クラスのオブジェクトを書く人はそれを守る必要があります
あなたが周りを回り始める実際のプログラム
そのオブジェクトを参照する
あなたが今では多くのマスターを持っている今、あなたは複数のマスターの鉱夫を持っています
誰かが何かを呼び出すことができます
いつでもあなたが最後にやったことは、たぶん彼らが友人かもしれないと言ってしまう
彼らはお互いの隣に立っていて、彼らは大丈夫です
空想の馬
あなたはダンスを知っていて、私は前脚をして、新しいバックバッグとその
人形の権利ではなくプログラミングで起こる
あなたは時々、彼らはちょうど行くと誰かが正面を作ろうとしているように知っている
もちろんこの方法で行くと誰かが馬の後ろに行くようにしようとしている
そうすれば、それは機能しないので、あなたはあらゆる種類の保護を持っていなければなりません。
あなたは実際にこれを効果的に行うことはできません
Javaとそれのような言語はあなたにこれを行う有効な方法を与えません
リファレンスが流出すると直ちにこれに苦しんでいます
あなたの苦しみ
今私はあなたが何らかのレベルの価値オブジェクトを使用していると言うことを知っていますが、
どこでもあなたはできるが、あなたはそうではなく、それは劇的ではなく、それはまだ難しい
誰かがあなたに参照権を与えるかどうか分からない
インタフェース
それがあなたに踊り始めることを知ることができますか？
Javaの中には、それを回避するつもりはないと言ってくれるものは何ですか？
とにかく何かを入力する契約何でも
何もないので、毎日あなたはこの不幸な顔をして、最後を書く
多くの人がプログラムを書いている問題は、そのようなプログラムです
それ自体では、標準を知っていますが、標準を知っています
コンパイラの作家はそれを書いて、この偉大な言語は本当に
それでよかった
そうだけど、それは実世界ではない。人々が他の人と話すためのプログラムを書く方法
プログラムは日常的に私たちはいつもそれを行う
人がワイヤーに物を置く方法
うわーは恐ろしい
大丈夫ですが、ちょうどあなたのことを知っています。長い間、私たちはそれが悪いと判断しました。
アイディア
私はあなたがメモを持っているかどうか分からないが
電線や偽装することができますが、これらの精巧なことをすべて行うことができます。
しかし、これらの事のほとんどは失敗しており、あなたはそうすることができます。
あなたは小さな状況でそれを取り除くことができますが、それは物事ではありません
実際には、私たちは実際に誰かに何かへの参照を許さない
彼らは私たちの権利を遠隔操作の並べ替えに
これはええ、あなたのAPIがオブジェクトを取る場合、私が以前に言っていたことです
特に私たちのインタフェースへの参照によって、あなたは具体的に
クラスの定義あなたがそれについてもっと気分を変えないようにする
それが正しく突然変異するかどうか知っていますか？
私たちは本当にそれが堅牢性のためにとても重要なことです
これを制御するあなたのプログラム
答えはいいえあなたは全く助けを得ていないので、あなたのデフォルトのイディオムがあなたを残す
これらの問題に対処するために完全にあなた自身で完全に
あなたが偶然だけでこれらの問題を作り出すことを奨励し、
他のことはそう言いましょう。
会社
どれくらいの人が私たちのマイター会社を使うことを許されていないのですか？
誰もが許可されているハードワウです
go - yeah実際には悪いことではありませんが、許可されているとしましょう
右
そして誰かが、あなたがサーバーを稼働させて、何人の人が
HTTPや何か他の何かの上に私の私を選んでください私は誰も誰も
あなたがこのインターフェースを持っているために何をしなければならないのでしょうか？
私はオブジェクトを取ったと言った、私はオブジェクト上でこれらのメソッドのすべてを期待していましたが、今私は
あなたは何をしなければならない
マップマッピング右オブジェクトリレーショナルマッピングオブジェクトブロンドのオブジェクト
あなたが外の世界に出入りしたいときはいつも何かを写します
あなたが書いていないものは、私の目が出ている
質問の権利からいくつかのWebサイトが好きになるようにはならない
私の電話を受け入れるか、あなたに私の私の電話をかける
あなたの世界の外にあなたの箱の外に出なければならないときはいつでもあなたのオブジェクトを見る
あなたがJavaプログラムで知っているように、あなたはマップする必要があります。
オブジェクト指向プログラミングは、必要なすべてを言って続編を蹴るような単純なものです
オブジェクト・リレーショナル・マッピングとそれは問題の続編のようなものです
それはオブジェクトの問題ではありません。オブジェクトは世界の方法ではありません
世界で何も働かない人々が自分の弦を手渡さないように働く
他の人たちには、それらのことをやってみるのが好きです
これは私たちがサッカーチームのように
それは誰もが他の誰かへの参照を持つことができ、あなたがいつ知っているかのようなものです
あなたは私に渡され、好きな話はスパゲッティの悪夢を作るだろう
それは世界の仕組みではなく、世界の仕組みとまったく同じです
どのように物理学のコースではない
私たちは実世界をモデル化する目的でオブジェクトを言います
あまり現実的ではない完全なプログラミング製作です
外の世界にあるほとんどのものにはあまり適していません
すべてのものが理にかなっているあなた自身の世界を構築しますが、それは本質的に私は
特有のものを呼び出す
大規模なシステムで正しいシステムを動作させる方法ではないので、
システム
うまく単語システムは立つことを意味する
私はそのアイデアが大好きです。私はいつもこの脚で
この独立した部品を立ち上げて何かをしようとする自己組織化
実質的に独立した部品を一緒に接続する
既に3つの3つのものを持っているもののようなスタンドを引き起こす
あなたはそれを起立させていません
重要なことは自立しており、一般的にはビルドしようとしています
システムを独立させる方法で
同じプログラミング言語を使用している別のサーバーが
私たちは同じ実行時にJavaランタイムの同じバージョンまたは同じタイプです
システム
私たちが気にしていないようなシステムを構築したいのですが、理由はありません。
それは脆弱な権利になるだろう
他の人と同意しなければならない変更を加えるのは難しいでしょう
明日我々はこのことをするつもりだ、そしてすべてが
あなたは3つの2つ1つを知って異なる
あなたはインターネットがそのようには機能しないとは思わない
権利はありません
私たちは特定のものを知っているわけではありません。
独立した
システム間で起こるほとんどの事柄は、2つの技術のうちの1つを正しく使用します
彼らは飛行機のデータを持っている私たちのPCを使用して戻るか、またはあなたがデータを送信し、
誰かが後で現れ、ちょうどフローデータを送るだけのデータを得る
これは、システムが構築される方法です。
インターネットのように、ほとんどのシステムは正しく、それらのシステムは柔軟です
彼らがどれだけ自立しているかの柔軟性を測定する
誰かがアップグレードできるシステムのこれらの部分を独自に開発できますか
彼らはシステムの一部であり、他の人を邪魔することはありません。
twitterがホームページを変更したときにウェブブラウザに通知しない
あなたが知っているサファリを持つのが好きなことは何か特別なことをする
それはどのように動作するのではないが、彼は独立した開発に独立した時間を持っている
フレームには、他のものがこれに重大です。
もう一端は変わるつもりですが、あなたは違うことに寛容でなければなりません
あなたはここでうまく言うことはできません私たちの契約はあなたが900ものがあることを知っている
まさにこのようにして私は仕事をして、それから仕事をするつもりです。
何かを変える
私たちはあなたに昼食と
会議を持って、そして、あなたが寛容でなければならないことをもう一度決めてください。
ロックステップを変更する必要がないことをいくつか受け入れて
システムは本質的に動的であり、本質的に拡張可能です
それは私がちょうど言ったシステムですダイナミックなタイプで作られている
拡張可能な型
彼らは彼らが見ることを期待していなかったデータを受け入れることができ、
落ちるとうまくいけば、彼らはそれを正しく伝播する良い仕事をするでしょう
彼らはすべてこのように作られているので、これは閉鎖の他の基本的な考えです
私たちはシステムの内部を構築する必要があります。
システムは、それらを必要とするシステムに発生するすべての価値命題
クラスやクラスを変更するたびに、どれだけ多くの人がミーティングをしたいか
サブシステムの人々は私がクラスを変更するたびにミーティングを持っています
ええ、これを書く必要がありますので、私たちは
同じ理由でシステム内の変更可能なデータを使用して通信する必要があります
私たちは外で行う
システムをより堅牢にすることで、変更が容易になり、
独立した部品を別々にすると、それらを右に動かすことが容易になります
サブシステムの独立性を得るために疎結合しています
マッピングは何ですか？
実際のマッピングは正しくありません。これは、RPCが正しくマッピングされる必要はありません。
私たちは関数が呼び出される前に関数を呼び出すことができます
私たちは私たちが怒っていた前にPCを持っていた
私たちはデータを2つの関数に渡し、データを返すことができます
私たちは以前それをやることができていましたが、私たちはこの精巧なものすべてを持っていました
今私はそれを正しくする方法を忘れていました。
手がかりやチャンネルやそのようなものを使ったインサイダープログラム
それは他の重要なアイデアです
今すぐ処理され、状態を右にするだろうClojureは
もちろん実用的な言葉では処理することはできませんし、状態も理由もありません
あなたのプログラムを実行する
私はちょうどコンピュータを熱くし、あなたは家に帰る
あなたは州と効果を持つつもりですが、これは私たちが残した別の地域です
ただ完全に何もない
Javaのようなオブジェクト指向言語ではここには何もありません
純粋な意志を持っている非常に派手な機能言語です
彼らは型システムを強制して、すべてを特定して分離します
私の義務を果たすことができるあなたのプログラムの部分は、
私が純粋な場合や、効果システムを介して
そしてそれに代わるものがあるのは、私がほとんどの人が持っていなければならないものではないということです
絶対に何もしていないし、少なくともあなたは構造をreifiedすることができます
状態の変更を明示的に行い、Clojureの設定はJavaおよび
C ++とCシャープ
あなたは何も得ていません。新しいもの
税金とあなたは背中と幸運の仲間のパットを知っている
3人の花嫁がそれを予約しました
だから、Clojureには純粋さはありませんが、Clojureには明示的な構造があります
状態
これらは、それらがセマンティクスを持つ変数であると想像できるようなものです
それで、誰もがいつでもこの寓話に襲われてくるようなものではない
私はあなたに機能を与えようとしていると言って、あなたは何とかそれを適用する
変数をある状態から別の状態に移動する
そうすることで、紛争や人種のないことを保証することができます。
決して物の半分になることはなく、これらの変数は常に参照する
値
あなたは常にそれらを観察したり、逆参照したり、価値を引き出すことができます
これらのリファレンスだけが価値のポイントを販売していることは他にありません。
値
その半分が何でも好きかもしれないし、あなたが好きかもしれない変更可能なオブジェクトはありません
あなたが月などの権利を設定できる日付クラス
日付は、その参照を作成できる日付への参照を持つ値です
別の日付を指す
あなたは日付を変更することはできません。
あなたは値を持っています
あなたは日付を変更することはできませんし、変更できる場所は42かもしれません。
それらの原子はただ一つのものを指しています
それらの間で、あなたはさまざまな変種の全体の束を得ることができます右Kaz
あなたが言うならば、この新しいものを作るだけであると言う後継船モデルを実装する
私の前提がまだ有効であり、最も小さいと言えば、あなたはこのことを知っている
バージョン
それをラップするコンストラクトが表示されますので、ループを右に借りる必要はありません。
他に何か
だから私の関数は、その使用の内側に適用されますKazはループを行う
私は、レースがなくても、そこにはっきりとした成績を残すことができます。
紛争
より大規模なトランザクションの種類を可能にするSTMエンクロージャもあります
変更が発生するが、ポイントはこの構成は仕事をしていると
契約はここでは突然変異がシステム内でどこにあるかを呼び出す
ここには州があり、あなたはそこから抜け出す方法を持っています
私があなたに何かを伝えたら、それがどう変わるかわからない
その価値を救うことができますか
私があなたにいくつかのコンポジット型のインタフェースによる参照を与えるかのように
どのように価値を救うことができるのかを突き止めることができるかどうかは分かりません
それを行うための安全な方法は何ですか？
あなたは私がまったく働くクローンを知らない
すみませんが他のことはできません
何が間違っているのですか？
何も
これは動作するシステムを作るための重要なもののようです
あなたはこれを絶対に何もしていませんが、あなたは自分自身を構築しなければなりません
この周りのコンベンション
あなたが正しいと思うように、爆発物
構築するか、間にあるすべてのものがハスケルに行きます
大惨事を経験した後、私たちはエンクロージャーを持っています。
チャネルモデルです
あなたがスレッドを設定する必要があるので、それは手掛かりより少し豊富です
それらに基づいているセマンティクスを持つすべてのマイクロ権利を行う
連続する順次プロセスの通信と呼ばれるものですが、
基本的なアイデアは、あなたが特にそうであるときに励まそうとしていることです。
私はAcornを置くと言っているのではなく、システムを通して価値を伝えようとしています
この木の後ろに来て、木の上でそれを見つける
あなたはコンボのベルトにAcornを置くつもりだと言います
コンベヤベルトとその2つのものの間に大きな違いがあります
あなたが何かをコンベアベルトに乗せてからそれに戻ったら
あなたは何を期待していますか？
命令するものは何も動いていない、それはそれです
あなたが変数で書くことができるロジックの種類が正しくないように浮動小数点
帰ってきて、場所を見直してその場所を更新してみてください
もう一度読む
それが流れるので、フローはシステムデータフローを構築するためのより堅牢な方法です
変数よりはるかに堅牢な方法ですので、場所の流れを強調したい
重要なプログラムサイズ
小さいほうがいいですね。そこにはアプリがあります
私たちのような研究をしている人は研究を行い、より小さなプログラム
より少ないバグを持つ
それは単純なのは、この
より小さいプログラムではバグが少なくなります。大きなプログラムではバグが長くなります
彼らは維持するのが難しく、彼らはより脆い
そうだけど、面白いと思うのは、小さな書き込みの2つの味があるということです
多くの言語は、サイズの小さい簡潔な権利に焦点を当てています
あなたのif文はどれくらい小さいのですか？
小さなものがあなたの構文であることを知っています。
そこには、RubyとPythonに焦点を当てた多くの言語があります。
多くの言語は、実際には非常に優れていますが、大きな影響
プログラム上では、それはあなたから移動していないすべての権利を知っている
文字 - 20文字私はあなたが右にアクセスすることはありません
最も重要なことは、より具体的なものからあなたのプログラムに移行することです
それを縮小するより一般的に
それは大きな利益です。それは、あなたが行っている分野です
私が苦しんでいると思う他のものの1つで、2倍以上の報酬を得る
オブジェクト指向からのものは、私たちが
私たちは新しいアイデアを持っている新しいもの新しいクラスのデータブーム
私が気にしていないものは、値の型が何であれ
それはあなたがJavaの権利の地図としてそれを使用することさえできないことを除いて、栄光のある地図です
それは一般的な方法は何かを操作するこれを得ることを取得する
新しいタイプの新しい言語が自分の小さな語彙を得る
私とても
より多くのコードを使用することができます
基本的に何が起こっているのかは、
オブジェクトには自分の小さな言語があります
私のインターフェース私の言語これは私が逃げたい私の最大のペットのピエボです
これから私たちが書くことを始めたら、これはそういうことです
この目的はちょうど人生を吸うことですので、そこに吸い込まれる人生を見てみましょう
これは実際にはこれをスキップしたちょっとした部分です
サーブレットのリクエストとそれらは本当にhttpservletrequestの少しを持っている
この事の大きさを倍にする
しかし、あなたに私の質問はどれくらいの昼寝
あなたがここに表示されます私たちはあなたが価値を得る名前のようなものです
私は1つ持っている私は実際にはオークションの事を行うことができない1つを持っている
あなたは何人ですか？
ええ、大丈夫ですので、まずはこのゲームはまず難しいです
あるものがある私は3つを持っていると全体的なものは昼寝です
だから私は4つの権利を離れてそれを選ぶことを知っています
本当に面白いのは、これらの地図インターフェイスを見ていることです。すべてのアドホックです
他の何かを推測する
彼らはあなたが実際に地図を得ることができる1つを設定しているすべて異なっている
あなたはいくつかの種類のマップを持っています。
この1つのクラス
これは右のエンクロージャーです
このようなものは、テキストとしてHTTPのワイヤーを介して来た
どのように起こったのか、あなたがこれを知っている理由
狂っている
今焦点を当てて、中括弧はあなたがどのように見ることができるマップであると言いました
あなたが知っているのはあなたが知っていることです
それでもマップは正しい
毎回他のものを操作するコードを書くつもりなら
あなたが正しいと思う1行のコードは特別なものになるでしょう
どんなjavafxサーブレットであろうと、あなたはこのコードに明示的に正しいコードを書いています
HTTPをやる別の方法があるのであれば、おそらくサービスがあるのではないでしょうか？
httpへの唯一の方法
しかし、httpに別の方法があれば、そのコードを再利用できるようになります
いいえ、それはすべて、この人や人のようなもののアイデアにハードワイヤードです
HTTPリクエストが正しい
だからええ、大したことはありません。あなたのIDで働く
私はそれを覚えていないので、うーん、私の良さ
だから、私が押しても何か良いことが起こるだろう。なぜなら
私はそうでなければ運命ですもちろん私はスペックを見ることができました私たちが同意できるようなニール
これらの名前で私はそれを得ることはありません
あなたは、子供がスイングをミキサーに入れないように教えることができます
彼らは一生の間それを覚えています
彼らは間違いを起こすことはありませんが、大人のプログラマーは大人になる必要があります
我々は物事からフロントのための保護権利が必要ですが、我々が得る保護は
本当に最小限
一貫性のないインタフェースでは馬鹿だよ
それは信じられないほど独特のインターフェイスだから、もしあなたが好きなら
2番目の実装がある
あなたは働くことになるでしょう私はそれを消費するトン以上のコードを行います
あなたは既にClojureのバージョンですべてのライブラリを使用することはできません
マップコードは、この数百の関数のうち最後のものです
あなたはそれらを使ってこれを作成することができます。
これらを使って、これを操作するための新しいコードはありません
あなたが既に知っているすべての機能をコード化してください。
私たちが正しい地図を作成する前に彼らが行っていた代表データ
テストの権利は、データをテストする方が簡単です。
この
ええ、あなたはこれらのうちの1つを作ることができますか？
うん、大丈夫
彼らはもう1つの問題は、プログラムのあなたの典型的な仕事は2から3
カップルにこの右の100のクラスのより多くのより多くのオーダー
100人以上の人と1000以上のクラスを持つプログラム
ええ
それはあなたのパートナーがどちらの方法よりも小さくて済むように、大丈夫です
彼らはより簡潔で一般的なプログラミングをサポートしています。
これらのデータ抽象でプログラミングされている
だから、これはいつも私が私のタイプが好きな私が私のような最大の予約です。
私は私のIDEが好きです
あなたは私がそれ以外の何かを扱うことができないことは知っているし、それは本当だ
右
あなたが好きなタイプでないJavaのタイプを持っているなら、派手な服装システムは
あなたはあなたが知っていることを知ることができるJavaのタイプがある場合は、より多くを行う
タイプミス、押されているので、文字列を渡すことになっていますが、本当にそうです
あなたのテストや反乱のやりとりがそれを捕まえることを
品質の質の部分には不十分な品質の指標ではありません
右のタイプミス
しかし品質だけでは十分ではありません。品質は他のすべてにあります
あなたが持っているものはどこにもない
非常にカップルのプログラムを書くことが奨励された柔軟な
お客様のステークホルダーの品質指標を一切満たしていません
事実はそれに反して何度も指摘されたか、間違ったことを指摘した
コードが巨大なので、それが何をするのかを本当に理解することさえできません
もはやバグやプログラムの最大の原因は誤解です
誰もが間違っている
私はステークホルダーに話をしました。彼らは私にこう言っていました。
私が実際のバグの俳優であるプログラムを書いたときの状況
他のすべてのものによってプログラム
彼らが見るのが難しいバグ
だから私はこのデフォルトのイディオムは大きなものだと思う
私はこれに多くの時間を費やすのが好きですが、私には面白かった
いつもこの経済的な意味が実際に何を意味するかを調べるのが好きです
家計の経営権に関連するので、家政の考え方は一種
冗長
それは言葉の意味であり、あなたが私たちのことを知っていると言います
プログラミングハウスはまるでホーダーズのようなものです
あまりにも多くのものがそこにある
すべてが大きすぎる基本的なことをするにはあまりにも多くの人が必要です
Clojureはこれ以上チュートリアルのエンクロージャではありませんでしたが、
事はそれのほとんどが図書館にあるということですClojureは図書館によって成長します。
成長に対して本当にかなり激しく保護されています
実験や言語デザインを知っているようなものではありません
私が話したいと思っているClojureの部分の1つは、多形性と
それは単なる別の例だから私はたくさん話をしていない
シンプルだが、その多形性を閉鎖するクールなものの一つは
独立した
言い換えれば、あなたはもっと近くに想像することができる継承を必要としません
プロトコルと呼ばれるものには、一緒に機能する一連の機能があります
最初の引数に多型があります
だから、それはあなたがjavaで持っているのと同じ種類の単一のディスパッチのようなものです
それらをインタフェースとして想定していますが、継承を必要とせず、
継承を必要としないことについての美しいことは、プロトコルを持つことができるということです
完成したものに拡張することができます
あなたは息子が長い間前に書いたことを知っています。それは決して変わることはありません
今はインターフェイスの実装を正しく行うつもりです
私たちが通常持っているものがあるから
私たちはフレームワークの問題を持っているJavaの権限フレームワークは、
それが付属していて、人々はそれらのインターフェースを実装しますが、
ベンダーからのソフトウェアは、インターフェイスとベンダーからのものを持っているようです
ベンダーのオブジェクトを使用したい
あなたはどのようにしてベンダーのインターフェースを実装するのが良いか
それはちょうどこれはC ++の世界よりも悪いが起こることはありませんが、Javaでは
まだこの問題を持っているのは、人々が
インタフェースとそれ以外の場合はそれを実装するインタフェースは狭いです
多形性を持っているエンクロージャーは、アラカルトであり、
あなたが私がMabelを知っているかもしれないすべての権利を引き出す必要はないかもしれないのでカップリング
近づくほど面白いように見えるので、技術的な権利だけではない
これらのプログラミングについても、エコについては何もない
それとClojureの使い方についての最初のことは、あなたが
既に知っているエコシステムとの接続を維持します。
デプロイメント環境ではなく、両方のライブラリで相互運用が可能なライブラリ
ケースは非常に良いです
私はすべてこれらのClojureデータ構造です。
適切な
彼らはすべてあなたができるすべての仕事の利益を実装することができますjava.util.map
かなり簡単だった角かっこでそれらのものの道の一つを取る
継承するものは、ランダムを実装するjava.util.listが必要です
作動するアクセス権
行く準備ができてClojureも非常に安定している
あなたは私がJavaの価値を知っていることを知っています。私はそれがJavaが成長した理由の重要な部分だと思います。
近くに同じアプローチを取るgithubの子供たちがハッキング離れて追加するようなものではありません
すべての新しいアイデアやそれはシンクタンクの実験ではなく、生産用に作られています
使用して、それは非常に安定しているすべてのプログラムは、長い時間前からまだ実行
あなたが今すぐたくさんの本が始まりたいのであれば、本があります
差し押さえと私は彼女の最後の5年前に話し、人々は聞いたことがない
閉鎖して、今そこにはたくさんのツールがあります
クラブコードが差し押さえを強調し、構造的な鍋のようなクリップ
ああ、IntelliJと同じこと
ブレークポイントはあなたのタイプを見て、ポップアップを開始します
これは良いことです、そして、あなたはそこに落ち着きがあります。
一度それに慣れると良い
さまざまな分野に数多くのツールがあります。
githubに12,000レポ
メーリングリストには約10,000人のユーザーがおり、
すべての幸せな素敵な人々
私は、問題はあなたがこれまで古いを見てきた場合だと思うすべての権利を約束し、彼ら
リストコミュニティ彼らはすべて幸せだった素敵な人々がクローズしているあなたのユーザーは満足している
クラブコードが差し押さえを強調し、構造的な鍋のようなクリップ
ああ、IntelliJと同じこと
ブレークポイントはあなたのタイプを見て、ポップアップを開始します
これは良いことです、そして、あなたはそこに落ち着きがあります。
一度それに慣れると良い
さまざまな分野に数多くのツールがあります。
githubに12,000レポ
メーリングリストには約10,000人のユーザーがおり、
すべての幸せな素敵な人々
私は、問題はあなたがこれまで古いを見てきた場合だと思うすべての権利を約束し、彼ら
リストコミュニティ彼らはすべて幸せだった素敵な人々がクローズしているあなたのユーザーは満足している
素晴らしい人たち
それは私たちの言語がおもちゃであるクロージャーと赤い月がそれを吹き飛ばしたところです
そこに
ああ機能的なLisp何が起こっている世界で
それを見てそこには、技術的なレーダーを採用することは、実際には技術から消えている
作家はもちろんあなたがすでに閉じて使用する必要があります
と彼らは右の人々がすでに閉鎖を使用している
人々の多くはすでにエンクロージャの銀行がClojureを使用してスタートアップのたくさんの
分析の住宅Clojureの開示をたくさん人々が成功している
それで私はそれが今日の短いメッセージだと思う
Clojureの背後にあるアイデアは、より早く、より柔軟なプログラムにあなたを導くことです
そして
それがアプローチする方法は、データ指向でシンプルであり、私は本当に
おかげさまでありがとう
